/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentation;

import business.book_business;
import java.time.LocalDate;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import pojo.book;

/**
 *
 * @author TIN
 */
public class NewBooks extends javax.swing.JFrame {

    book_business book_bsn = new book_business();

    /**
     * Creates new form NewBooks
     */
    public NewBooks() {
        initComponents();
    }

    public void Refresh() {
        List<book> books = book_bsn.getNewBooks();

        Object obj[][] = new Object[books.size()][10];
        String[] columnNames = {"Id", "Book", "Price", "Quantity", "Author", "Publisher", "Category", "PromoId", "isActive", "Time Adding"};
        int count = 0;
        for (int i = 0; i < books.size(); i++) {
            boolean isActive = books.get(i).isIsActive();
            if (!isActive) {
                count++;
                continue;
            }
            int id = books.get(i).getId();
            String name = books.get(i).getName();
            Double price = books.get(i).getPrice();
            int quantity = books.get(i).getQuantity();
            String author = books.get(i).getAuthor();
            String publisher = books.get(i).getPublisher();
            String category = books.get(i).getCategory();
            int promo = books.get(i).getPromo_id();
            LocalDate day = books.get(i).getDay();
            obj[i][0] = id;
            obj[i][1] = name;
            obj[i][2] = price;
            obj[i][3] = quantity;
            obj[i][4] = author;
            obj[i][5] = publisher;
            obj[i][6] = category;
            obj[i][7] = promo;
            obj[i][8] = isActive;
            obj[i][9] = day;
        }
        int size = books.size() - count;
        Object newObj[][] = new Object[size][10];
        int j = 0;
        for (int i = 0; i < books.size(); i++) {
            if (obj[i][0] != null) {

                newObj[j] = obj[i];
                j++;
            }

        }
        DefaultTableModel tableModel = new DefaultTableModel(newObj, columnNames) {
            @Override
            public Class getColumnClass(int column) {
                return switch (column) {
                    case 0 ->
                        Integer.class;
                    case 1 ->
                        String.class;
                    case 2 ->
                        Double.class;
                    case 3 ->
                        Integer.class;
                    case 4 ->
                        String.class;
                    case 5 ->
                        String.class;
                    case 6 ->
                        String.class;
                    case 7 ->
                        Integer.class;
                    case 8 ->
                        Boolean.class;
                    case 9 ->
                        LocalDate.class;
                    default ->
                        String.class;
                };
            }
        };
        jTable1.setModel(tableModel);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        List<book> books = book_bsn.getNewBooks();

        Object obj[][] = new Object[books.size()][10];
        String[] columnNames = {"Id", "Book", "Price", "Quantity", "Author", "Publisher", "Category", "PromoId", "isActive", "Time Adding"};
        int count = 0;
        for (int i = 0; i < books.size(); i++) {
            boolean isActive = books.get(i).isIsActive();
            if (!isActive) {
                count++;
                continue;
            }
            int id = books.get(i).getId();
            String name = books.get(i).getName();
            Double price = books.get(i).getPrice();
            int quantity = books.get(i).getQuantity();
            String author = books.get(i).getAuthor();
            String publisher = books.get(i).getPublisher();
            String category = books.get(i).getCategory();
            int promo = books.get(i).getPromo_id();
            LocalDate day = books.get(i).getDay();
            obj[i][0] = id;
            obj[i][1] = name;
            obj[i][2] = price;
            obj[i][3] = quantity;
            obj[i][4] = author;
            obj[i][5] = publisher;
            obj[i][6] = category;
            obj[i][7] = promo;
            obj[i][8] = isActive;
            obj[i][9] = day;
        }
        int size = books.size() - count;
        Object newObj[][] = new Object[size][10];
        int j = 0;
        for (int i = 0; i < books.size(); i++) {
            if (obj[i][0] != null) {

                newObj[j] = obj[i];
                j++;
            }

        }
        DefaultTableModel tableModel = new DefaultTableModel(newObj, columnNames) {
            @Override
            public Class getColumnClass(int column) {
                return switch (column) {
                    case 0 ->
                    Integer.class;
                    case 1 ->
                    String.class;
                    case 2 ->
                    Double.class;
                    case 3 ->
                    Integer.class;
                    case 4 ->
                    String.class;
                    case 5 ->
                    String.class;
                    case 6 ->
                    String.class;
                    case 7 ->
                    Integer.class;
                    case 8 ->
                    Boolean.class;
                    case 9 ->
                    LocalDate.class;
                    default ->
                    String.class;
                };
            }
        };
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New Books");

        jTable1.setModel(tableModel);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Refresh();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
